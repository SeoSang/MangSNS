{"version":3,"file":"static/webpack/static\\development\\pages\\signup.js.ceb39e1e40c78cc1632b.hot-update.js","sources":["webpack:///./pages/signupForm.js"],"sourcesContent":["import React, { Component, memo } from \"react\"\r\nimport Head from \"next/head\"\r\n\r\nimport {\r\n  Form,\r\n  Input,\r\n  Tooltip,\r\n  Icon,\r\n  Cascader,\r\n  Select,\r\n  Row,\r\n  Col,\r\n  Checkbox,\r\n  Button,\r\n  AutoComplete\r\n} from \"antd\"\r\n\r\nconst { Option } = Select\r\nconst AutoCompleteOption = AutoComplete.Option\r\n\r\nconst residences = [\r\n  {\r\n    value: \"마포구\",\r\n    label: \"마포구\",\r\n    children: [\r\n      {\r\n        value: \"성산동\",\r\n        label: \"성산동\"\r\n      },\r\n      {\r\n        value: \"망원동\",\r\n        label: \"망원동\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    value: \"기타\",\r\n    label: \"기타\"\r\n  }\r\n]\r\n\r\nclass SignupForm extends Component {\r\n  state = {\r\n    confirmDirty: false,\r\n    autoCompleteResult: []\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault()\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        console.log(\"Received values of form: \", values)\r\n      }\r\n    })\r\n  }\r\n\r\n  handleConfirmBlur = e => {\r\n    const { value } = e.target\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value })\r\n  }\r\n\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const { form } = this.props\r\n    if (value && value !== form.getFieldValue(\"password\")) {\r\n      callback(\"Two passwords that you enter is inconsistent!\")\r\n    } else {\r\n      callback()\r\n    }\r\n  }\r\n\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const { form } = this.props\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields([\"confirm\"], { force: true })\r\n    }\r\n    callback()\r\n  }\r\n\r\n  handleWebsiteChange = value => {\r\n    let autoCompleteResult\r\n    if (!value) {\r\n      autoCompleteResult = []\r\n    } else {\r\n      autoCompleteResult = [\".com\", \".org\", \".net\"].map(domain => `${value}${domain}`)\r\n    }\r\n    this.setState({ autoCompleteResult })\r\n  }\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form\r\n    const { autoCompleteResult } = this.state\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 }\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 }\r\n      }\r\n    }\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8\r\n        }\r\n      }\r\n    }\r\n    const prefixSelector = getFieldDecorator(\"prefix\", {\r\n      initialValue: \"86\"\r\n    })(\r\n      <Select style={{ width: 70 }}>\r\n        <Option value=\"86\">+86</Option>\r\n        <Option value=\"87\">+87</Option>\r\n      </Select>\r\n    )\r\n\r\n    const websiteOptions = autoCompleteResult.map(website => (\r\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\r\n    ))\r\n\r\n    return (\r\n      <>\r\n        <Head>\r\n          <title>MangSNS</title>\r\n          <link\r\n            rel=\"stylesheet\"\r\n            href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\r\n          ></link>\r\n        </Head>\r\n        <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n          <Form.Item label=\"E-mail\">\r\n            {getFieldDecorator(\"email\", {\r\n              rules: [\r\n                {\r\n                  type: \"email\",\r\n                  message: \"The input is not valid E-mail!\"\r\n                },\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your E-mail!\"\r\n                }\r\n              ]\r\n            })(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"비밀번호\" hasFeedback>\r\n            {getFieldDecorator(\"password\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"비밀번호를 입력해주세요!\"\r\n                },\r\n                {\r\n                  validator: this.validateToNextPassword\r\n                }\r\n              ]\r\n            })(<Input.Password />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"비밀번호 확인\" hasFeedback>\r\n            {getFieldDecorator(\"confirm\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"비밀번호를 확인해주세요!\"\r\n                },\r\n                {\r\n                  validator: this.compareToFirstPassword\r\n                }\r\n              ]\r\n            })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={\r\n              <span>\r\n                별명&nbsp;\r\n                <Tooltip title=\"무엇으로 불리고 싶으신가요?\">\r\n                  <Icon type=\"question-circle-o\" />\r\n                </Tooltip>\r\n              </span>\r\n            }\r\n          >\r\n            {getFieldDecorator(\"nickname\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"별명을 입력해주세요!\",\r\n                  whitespace: true\r\n                }\r\n              ]\r\n            })(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"거주지\">\r\n            {getFieldDecorator(\"residence\", {\r\n              initialValue: [\"망원동\", \"성산동\"],\r\n              rules: [\r\n                {\r\n                  type: \"array\",\r\n                  required: true,\r\n                  message: \"거주지를 입력해주세요!\"\r\n                }\r\n              ]\r\n            })(<Cascader options={residences} />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"휴대전화\">\r\n            {getFieldDecorator(\"phone\", {\r\n              rules: [{ required: true, message: \"핸드폰 번호를 입력해주세요!\" }]\r\n            })(<Input addonBefore={prefixSelector} style={{ width: \"100%\" }} />)}\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            {getFieldDecorator(\"agreement\", {\r\n              valuePropName: \"checked\"\r\n            })(\r\n              <Checkbox>\r\n                저는 <a href=\"\">약관</a>을 읽었고 동의합니다.\r\n              </Checkbox>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Register\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default memo(SignupForm)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAcA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AARA;AAeA;AACA;AAFA;AACA;AAKA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AADA;AAYA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AANA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AADA;AANA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AADA;AANA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AACA;AACA;AAHA;AAFA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAHA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AA7LA;AACA;AA+LA;;;;A","sourceRoot":""}